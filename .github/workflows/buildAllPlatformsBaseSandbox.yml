name: Build Base Sandbox for All Release Platforms

on: 
  workflow_dispatch:
    inputs:
      buildName:
        description: 'Name Of Executable. Should not contain spaces.'
        required: true
        default: 'BattleNationsBaseSandbox'
      environment:
        type: choice
        description: Which environment to deploy to
        options:
          - Base-Sandbox-Development
          - Base-Sandbox-Production
      ref:
        description: 'What ref to checkout. Can be a branch name, tag, or SHA. Uses default branch if not specified'
        required: false
      pushToPatchkit:
        description: 'Push output to Patchkit as draft release. This will overwrite any existing drafts!'
        type: boolean

jobs:
  envVarSetup:
    name: Setup Environment Variables
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      GITHUB_SHA_SHORT: ${{ steps.envVars.outputs.GITHUB_SHA_SHORT }}
      BUILD_TIME: ${{ steps.envVars.outputs.BUILD_TIME }}
      FILE_HASH: ${{ steps.envVars.outputs.FILE_HASH }}

    steps:
      # Using cached checkout to ensure the lfs assets are cached for the main runners
      # Otherwise we might pull 3 times and waste bandwidth
      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: Battle-Nations/BattleNations-Base-Sandbox
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set ENV Vars
        id: envVars
        run: |
          if [ -z "${{ github.event.inputs.ref }}" ]
          then
            echo No ref specified
            echo "::set-output name=GITHUB_SHA_SHORT::$(git rev-parse --short HEAD)"
            echo $(git rev-parse --short HEAD)
          else
            echo Ref specified
            echo "::set-output name=GITHUB_SHA_SHORT::$(git rev-parse --short ${{ github.event.inputs.ref }})"
            echo $(git rev-parse --short ${{ github.event.inputs.ref }})
          fi
          echo "::set-output name=BUILD_TIME::$(date "+%m-%d-%y_%H-%M-%S")"
          echo "::set-output name=FILE_HASH::${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}"

  buildForDesktopPlatforms:
    name: Build for ${{ matrix.targetPlatform }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment: ${{ github.event.inputs.environment }}
    needs: envVarSetup
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetPlatform: StandaloneLinux64
            os: ubuntu-latest
          - targetPlatform: StandaloneWindows64
            os: windows-2019
          - targetPlatform: StandaloneOSX
            os: macos-latest

    steps:
      - name: Setup Build Path
        id: buildPath
        run: |
          RAW_WINDOWS_WORKSPACE_PATH="C:\build_workspace"
          RAW_WORKSPACE_PATH="${{ github.workspace }}"
          WORKSPACE_PATH=${RAW_WORKSPACE_PATH//\\//}
          WINDOWS_WORKSPACE_PATH=${RAW_WINDOWS_WORKSPACE_PATH//\\//}
          echo "::set-output name=RAW_WINDOWS_WORKSPACE_PATH::$RAW_WINDOWS_WORKSPACE_PATH"
          echo "::set-output name=WINDOWS_WORKSPACE_PATH::$WINDOWS_WORKSPACE_PATH"
          echo "::set-output name=WORKSPACE::$WORKSPACE_PATH"
        shell: bash

      # There isn't enough space on the C-drive so we are making a workspace
      # on the c-drive and linking it to the original location with a junction
      - name: Create workspace on C
        if: ${{ matrix.os == 'windows-2019' }}
        run: mkdir -p ${{ steps.buildPath.outputs.WINDOWS_WORKSPACE_PATH }}
        shell: bash
      
      - name: Link C and D drive workspaces
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          cd ..
          rd ${{ github.workspace }}
          mklink /J ${{ github.workspace }} ${{ steps.buildPath.outputs.RAW_WINDOWS_WORKSPACE_PATH }}
        shell: cmd

      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: Battle-Nations/BattleNations-Base-Sandbox
          fetch-depth: 0
          submodules: 'recursive'

      - name: Show disk usage
        run: df -h
        shell: bash
      
      - uses: actions/cache@v3
        with:
          path: Library
          key:
            Library-${{ matrix.targetPlatform }}-${{ needs.envVarSetup.outputs.FILE_HASH }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-

      - name: Show disk usage
        run: df -h
        shell: bash

      - uses: Battle-Nations/unity-builder@bn-ci-main
        id: buildStep
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ github.event.inputs.buildName }}
          gitPrivateToken: ${{ secrets.GH_PAT }}

      # Setup Variable based on OS so we can share the same workflow for all three platforms
      - name: Setup Variables
        id: setupVariables
        run: |
          # Universal Variables
          BUILD_PATH=build/${{ matrix.targetPlatform }}
          BUILD_VERSION=${{ steps.buildStep.outputs.buildVersion }}
          SAFE_BUILD_VERSION=$(echo "${BUILD_VERSION//./_}")
          BASE_NAME=${{ github.event.inputs.buildName }}_${{ matrix.targetPlatform }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}
          BASE_NAME_NO_PLATFORM=${{ github.event.inputs.buildName }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}
          DO_DEBUG_SOURCE_PATH=DEBUG_${BASE_NAME}.zip
          DO_RELEASE_SOURCE_PATH=RELEASE_${BASE_NAME}.zip

          # OS Specific Modifications
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]
          then
            echo "::set-output name=RELEASE_ZIP_FILES::${{ github.event.inputs.buildName }} *.so ${{ github.event.inputs.buildName }}_Data/"
            echo "::set-output name=PATCHKIT_SECRET::${{ secrets.PATCHKIT_LNX_SECRET }}"
            DO_DEBUG_SOURCE_PATH=${BUILD_PATH}/${DO_DEBUG_SOURCE_PATH}
            DO_RELEASE_SOURCE_PATH=${BUILD_PATH}/${DO_RELEASE_SOURCE_PATH}
            elif [ "${{ matrix.os }}" == "windows-2019" ]
          then
            echo "::set-output name=RELEASE_ZIP_FILES::*.exe *.dll ${{ github.event.inputs.buildName }}_Data/"
            BUILD_PATH=${{ steps.buildPath.outputs.WINDOWS_WORKSPACE_PATH }}/${BUILD_PATH}
            echo "::set-output name=PATCHKIT_SECRET::${{ secrets.PATCHKIT_WIN_SECRET }}"
          elif [ "${{ matrix.os }}" == "macos-latest" ]
          then
            echo "::set-output name=RELEASE_ZIP_FILES::*.app"
            DO_DEBUG_SOURCE_PATH=${BUILD_PATH}/${DO_DEBUG_SOURCE_PATH}
            DO_RELEASE_SOURCE_PATH=${BUILD_PATH}/${DO_RELEASE_SOURCE_PATH}
            echo "::set-output name=PATCHKIT_SECRET::${{ secrets.PATCHKIT_MAC_SECRET }}"
          fi
          
          # Universal Outputs
          echo "::set-output name=BUILD_PATH::${BUILD_PATH}"
          echo "::set-output name=DO_DEBUG_SOURCE_PATH::${DO_DEBUG_SOURCE_PATH}"
          echo "::set-output name=DO_RELEASE_SOURCE_PATH::${DO_RELEASE_SOURCE_PATH}"
          echo "::set-output name=RELEASE_ZIP_FILENAME::RELEASE_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILENAME::DEBUG_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILES::${{ github.event.inputs.buildName }}_BackUpThisFolder_ButDontShipItWithYourGame/ ${{ github.event.inputs.buildName }}_BurstDebugInformation_DoNotShip"
          echo "::set-output name=DO_DEBUG_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/DEBUG"
          echo "::set-output name=DO_RELEASE_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/RELEASE"
        shell: bash

      # We need to chown the files in build on linux for our zip action below
      - run: sudo chown -R $USER build/${{ matrix.targetPlatform }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Zip Debug
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILES }}

      - name: Zip Release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.RELEASE_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.RELEASE_ZIP_FILES }}

      - name: Move Artifacts to Github Workspace
        run: cp ${{ steps.setupVariables.outputs.BUILD_PATH }}/*.zip ${{ steps.buildPath.outputs.WORKSPACE }}
        if: ${{ matrix.os == 'windows-2019' }}
        shell: bash

      - run: ls -lashi ${{ steps.buildPath.outputs.WORKSPACE }}
        shell: bash

      - name: Upload Debug To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_DEBUG_OUTPUT_PATH }}"
          permission: private

      - name: Upload Release To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_RELEASE_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_RELEASE_OUTPUT_PATH }}"
          permission: private

      # We don't care about missing files so we or it with true
      - name: Remove Debug Folders and Zips
        if: github.event.inputs.pushToPatchkit == 'true'
        run: |
          ls -lashi
          cd ${{ steps.setupVariables.outputs.BUILD_PATH }}
          ls -lashi
          echo ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILES }}
          rm -rf "${{ steps.setupVariables.outputs.DEBUG_ZIP_FILES }}" || true
          rm "${{ steps.setupVariables.outputs.DEBUG_ZIP_FILENAME }}" || true
          rm "${{ steps.setupVariables.outputs.RELEASE_ZIP_FILENAME }}" || true
        shell: bash

      - uses: Battle-Nations/Patchkit-Actions@v1
        if: github.event.inputs.pushToPatchkit == 'true'
        with:
          secret: ${{ steps.setupVariables.outputs.PATCHKIT_SECRET }}
          api-key: ${{ secrets.PATCHKIT_API_KEY }}
          label: "${{ steps.buildStep.outputs.buildVersion }}"
          files: "${{ steps.setupVariables.outputs.BUILD_PATH }}"
          overwrite-draft: true

      - name: Show disk usage
        run: df -h
        shell: bash
