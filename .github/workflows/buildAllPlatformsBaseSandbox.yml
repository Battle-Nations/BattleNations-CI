name: Build Base Sandbox for All Release Platforms

on: 
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Which environment to deploy to
        default: 'Base-Sandbox-Development'
      ref:
        description: 'What ref to checkout. Can be a branch name, tag, or SHA. Uses default branch if not specified'
        required: false
      # useCache:
      #   description: "Whether to use the cached library from previous builds. Leave this checked unless there are build issues that can't be explained"
      #   type: boolean
      #   default: true

env:
  BUILD_NAME: "BattleNationsBaseSandbox"

jobs:
  envVarSetup:
    name: Setup Environment Variables
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      GITHUB_SHA_SHORT: ${{ steps.envVars.outputs.GITHUB_SHA_SHORT }}
      BUILD_TIME: ${{ steps.envVars.outputs.BUILD_TIME }}
      FILE_HASH: ${{ steps.envVars.outputs.FILE_HASH }}

    steps:
      # Using cached checkout to ensure the lfs assets are cached for the main runners
      # Otherwise we might pull 3 times and waste bandwidth
      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set ENV Vars
        id: envVars
        run: |
          if [ -z "${{ github.event.inputs.ref }}" ]
          then
            echo No ref specified
            echo "::set-output name=GITHUB_SHA_SHORT::$(git rev-parse --short HEAD)"
            echo $(git rev-parse --short HEAD)
          else
            echo Ref specified
            echo "::set-output name=GITHUB_SHA_SHORT::$(git rev-parse --short ${{ github.event.inputs.ref }})"
            echo $(git rev-parse --short ${{ github.event.inputs.ref }})
          fi
          echo "::set-output name=BUILD_TIME::$(date "+%m-%d-%y_%H-%M-%S")"
          echo "::set-output name=FILE_HASH::${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}"

  buildForDesktopPlatforms:
    name: Build for ${{ matrix.targetPlatform }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment: ${{ github.event.inputs.environment }}
    needs: envVarSetup
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetPlatform: StandaloneLinux64
            os: ubuntu-latest
          - targetPlatform: StandaloneWindows64
            os: windows-2019
          - targetPlatform: StandaloneOSX
            os: macos-latest

    outputs:
      buildVersion: ${{ steps.buildStep.outputs.buildVersion }}

    steps:
      - name: Setup Build Path
        id: buildPath
        run: |
          RAW_WINDOWS_WORKSPACE_PATH="C:\build_workspace"
          RAW_WORKSPACE_PATH="${{ github.workspace }}"
          WORKSPACE_PATH=${RAW_WORKSPACE_PATH//\\//}
          WINDOWS_WORKSPACE_PATH=${RAW_WINDOWS_WORKSPACE_PATH//\\//}
          echo "::set-output name=RAW_WINDOWS_WORKSPACE_PATH::$RAW_WINDOWS_WORKSPACE_PATH"
          echo "::set-output name=WINDOWS_WORKSPACE_PATH::$WINDOWS_WORKSPACE_PATH"
          echo "::set-output name=WORKSPACE::$WORKSPACE_PATH"
        shell: bash

      # There isn't enough space on the C-drive so we are making a workspace
      # on the c-drive and linking it to the original location with a junction
      - name: Create workspace on C
        if: ${{ matrix.os == 'windows-2019' }}
        run: mkdir -p ${{ steps.buildPath.outputs.WINDOWS_WORKSPACE_PATH }}
        shell: bash
      
      - name: Link C and D drive workspaces
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          cd ..
          rd ${{ github.workspace }}
          mklink /J ${{ github.workspace }} ${{ steps.buildPath.outputs.RAW_WINDOWS_WORKSPACE_PATH }}
        shell: cmd

      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}
          fetch-depth: 0
          submodules: 'recursive'

      - name: Show disk usage
        run: df -h
        shell: bash
      
      # Not enough space on github cache for all our platforms
      # - uses: actions/cache@v3
      #   if: github.event.inputs.useCache == 'true'
      #   with:
      #     path: Library
      #     key:
      #       Library-${{ matrix.targetPlatform }}-${{ needs.envVarSetup.outputs.FILE_HASH }}
      #     restore-keys: |
      #       Library-${{ matrix.targetPlatform }}-

      - name: Show disk usage
        run: df -h
        shell: bash

      - uses: Battle-Nations/unity-builder@bn-ci-main
        id: buildStep
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.BUILD_NAME }}
          gitPrivateToken: ${{ secrets.GH_PAT }}

      # Setup Variable based on OS so we can share the same workflow for all three platforms
      - name: Setup Variables
        id: setupVariables
        run: |
          # Universal Variables
          BUILD_PATH=build/${{ matrix.targetPlatform }}
          BUILD_VERSION=${{ steps.buildStep.outputs.buildVersion }}
          SAFE_BUILD_VERSION=$(echo "${BUILD_VERSION//./_}")
          BASE_NAME=${{ env.BUILD_NAME }}_${{ matrix.targetPlatform }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}
          BASE_NAME_NO_PLATFORM=${{ env.BUILD_NAME }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}
          DO_DEBUG_SOURCE_PATH=DEBUG_${BASE_NAME}.zip
          DO_RELEASE_SOURCE_PATH=RELEASE_${BASE_NAME}.zip

          # OS Specific Modifications
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]
          then
            echo "::set-output name=RELEASE_ZIP_FILES::${{ env.BUILD_NAME }} *.so ${{ env.BUILD_NAME }}_Data/"
            echo "::set-output name=PATCHKIT_SECRET::${{ secrets.PATCHKIT_LNX_SECRET }}"
            DO_DEBUG_SOURCE_PATH=${BUILD_PATH}/${DO_DEBUG_SOURCE_PATH}
            DO_RELEASE_SOURCE_PATH=${BUILD_PATH}/${DO_RELEASE_SOURCE_PATH}
            elif [ "${{ matrix.os }}" == "windows-2019" ]
          then
            echo "::set-output name=RELEASE_ZIP_FILES::*.exe *.dll ${{ env.BUILD_NAME }}_Data/"
            BUILD_PATH=${{ steps.buildPath.outputs.WINDOWS_WORKSPACE_PATH }}/${BUILD_PATH}
            echo "::set-output name=PATCHKIT_SECRET::${{ secrets.PATCHKIT_WIN_SECRET }}"
          elif [ "${{ matrix.os }}" == "macos-latest" ]
          then
            echo "::set-output name=RELEASE_ZIP_FILES::*.app"
            DO_DEBUG_SOURCE_PATH=${BUILD_PATH}/${DO_DEBUG_SOURCE_PATH}
            DO_RELEASE_SOURCE_PATH=${BUILD_PATH}/${DO_RELEASE_SOURCE_PATH}
            echo "::set-output name=PATCHKIT_SECRET::${{ secrets.PATCHKIT_MAC_SECRET }}"
          fi
          
          # Universal Outputs
          echo "::set-output name=BUILD_PATH::${BUILD_PATH}"
          echo "::set-output name=DO_DEBUG_SOURCE_PATH::${DO_DEBUG_SOURCE_PATH}"
          echo "::set-output name=DO_RELEASE_SOURCE_PATH::${DO_RELEASE_SOURCE_PATH}"
          echo "::set-output name=RELEASE_ZIP_FILENAME::RELEASE_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILENAME::DEBUG_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILES::${{ env.BUILD_NAME }}_BackUpThisFolder_ButDontShipItWithYourGame/ ${{ env.BUILD_NAME }}_BurstDebugInformation_DoNotShip/"
          echo "::set-output name=DO_DEBUG_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/DEBUG"
          echo "::set-output name=DO_RELEASE_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/RELEASE"
        shell: bash

      # We need to chown the files in build on linux for our zip action below
      - run: sudo chown -R $USER build/${{ matrix.targetPlatform }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Zip Debug
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILES }}

      - name: Zip Release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.RELEASE_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.RELEASE_ZIP_FILES }}

      - name: Move Artifacts to Github Workspace
        run: cp ${{ steps.setupVariables.outputs.BUILD_PATH }}/*.zip ${{ steps.buildPath.outputs.WORKSPACE }}
        if: ${{ matrix.os == 'windows-2019' }}
        shell: bash

      - name: Upload Debug To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_DEBUG_OUTPUT_PATH }}"
          permission: private

      - name: Archive Debug On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/DEBUG"
          permission: private

      - name: Upload Release To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_RELEASE_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_RELEASE_OUTPUT_PATH }}"
          permission: private

      - name: Archive Release On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_RELEASE_SOURCE_PATH }}"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/RELEASE"
          permission: private

      # We don't care about missing files so we or it with true
      - name: Remove Debug Folders and Zips
        run: |
          cd ${{ steps.setupVariables.outputs.BUILD_PATH }}
          # Don't want to accidentally ship debug symbols so error if these don't get deleted properly
          rm -rf ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILES }}
          rm "${{ steps.setupVariables.outputs.DEBUG_ZIP_FILENAME }}" || true
          rm "${{ steps.setupVariables.outputs.RELEASE_ZIP_FILENAME }}" || true
        shell: bash

      - uses: Battle-Nations/Patchkit-Actions/upload@v2
        with:
          secret: ${{ steps.setupVariables.outputs.PATCHKIT_SECRET }}
          api-key: ${{ secrets.PATCHKIT_API_KEY }}
          label: "${{ steps.buildStep.outputs.buildVersion }}"
          files: "${{ steps.setupVariables.outputs.BUILD_PATH }}"
          changelog-file: 'releasenotes.txt'
          overwrite-draft: true

      - name: Show disk usage
        run: df -h
        shell: bash

  buildIOSProject:
    name: Generate ios project
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: envVarSetup

    outputs:
      buildVersion: ${{ steps.buildStep.outputs.buildVersion }}
      outputProjectZipPath: ${{ steps.setupVariables.outputs.BASE_NAME_NO_PLATFORM_NO_NAME }}/INTERMEDIATE
      outputProjectZipName: ${{ steps.setupVariables.outputs.BASE_NAME_NO_NAME }}.zip

    steps:
      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}
          fetch-depth: 0
          submodules: 'recursive'

      - name: Show disk usage
        run: df -h
        shell: bash
      
      - uses: actions/cache@v3
        with:
          path: Library
          key:
            Library-iOS-${{ needs.envVarSetup.outputs.FILE_HASH }}
          restore-keys: |
            Library-iOS-

      - name: Show disk usage
        run: df -h
        shell: bash

      - uses: Battle-Nations/unity-builder@bn-ci-main
        id: buildStep
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS
          buildName: ${{ env.BUILD_NAME }}
          gitPrivateToken: ${{ secrets.GH_PAT }}

      # Setup Variable based on OS so we can share the same workflow for all three platforms
      - name: Setup Variables
        id: setupVariables
        run: |
          BUILD_PATH="build/iOS"
          BUILD_VERSION=${{ steps.buildStep.outputs.buildVersion }}
          SAFE_BUILD_VERSION=$(echo "${BUILD_VERSION//./_}")
          BASE_NAME="${{ env.BUILD_NAME }}_iOS_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          BASE_NAME_NO_PLATFORM=${{ env.BUILD_NAME }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}
          echo "::set-output name=BASE_NAME_NO_PLATFORM_NO_NAME::_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          echo "::set-output name=BASE_NAME_NO_NAME::_iOS_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          DO_DEBUG_SOURCE_PATH=DEBUG_${BASE_NAME}.zip

          echo "::set-output name=INTERMEDIATE_ZIP_FILES::${{ env.BUILD_NAME }}"
          DO_DEBUG_SOURCE_PATH=${BUILD_PATH}/${DO_DEBUG_SOURCE_PATH}
          DO_INTERMEDIATE_SOURCE_PATH=${BUILD_PATH}/INTERMEDIATE_${BASE_NAME}.zip
          echo "::set-output name=BUILD_PATH::${BUILD_PATH}"
          echo "::set-output name=DO_DEBUG_SOURCE_PATH::${DO_DEBUG_SOURCE_PATH}"
          echo "::set-output name=DO_INTERMEDIATE_SOURCE_PATH::${DO_INTERMEDIATE_SOURCE_PATH}"
          echo "::set-output name=INTERMEDIATE_ZIP_FILENAME::INTERMEDIATE_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILENAME::DEBUG_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILES::${{ env.BUILD_NAME }}_BurstDebugInformation_DoNotShip/"
          echo "::set-output name=DO_DEBUG_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/DEBUG"
          echo "::set-output name=DO_INTERMEDIATE_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/INTERMEDIATE"
        shell: bash

      # We need to chown the files in build on linux for our zip action below
      - run: sudo chown -R $USER ${{ steps.setupVariables.outputs.BUILD_PATH }}

      - name: Zip Debug
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.DEBUG_ZIP_FILES }}

      - name: Zip Intermediate
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.INTERMEDIATE_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.INTERMEDIATE_ZIP_FILES }}

      - name: Upload Debug To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_DEBUG_OUTPUT_PATH }}"
          permission: private

      - name: Archive Debug On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/DEBUG"
          permission: private

      - name: Upload Intermediate To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_INTERMEDIATE_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_INTERMEDIATE_OUTPUT_PATH }}"
          permission: private

      - name: Archive Intermediate On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_INTERMEDIATE_SOURCE_PATH }}"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/INTERMEDIATE"
          permission: private

  buildAndPublishIOSIPA:
    name: Publish IPA
    runs-on: macos-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [envVarSetup, buildIOSProject]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}

      - name: Setup build directory
        run: mkdir -p build/iOS

      - name: Download iOS Artifact
        uses: Battle-Nations/DigitalOceanActions/spaces-download@main
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ env.BUILD_NAME }}${{ needs.buildIOSProject.outputs.outputProjectZipPath }}/INTERMEDIATE_${{ env.BUILD_NAME }}${{ needs.buildIOSProject.outputs.outputProjectZipName }}
          out_dir: "build/iOS"

      - name: Unzip iOS Artifact
        run: unzip -o build/iOS/INTERMEDIATE_${{ env.BUILD_NAME }}${{ needs.buildIOSProject.outputs.outputProjectZipName }} -d build/iOS

      - name: Setup Variables
        id: setupVariables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "Base-Sandbox-Development" ]
          then
            echo "::set-output name=CERTIFICATE_TYPE::development" #appstore, development, adhoc
            echo "::set-output name=CODE_SIGN_IDENTITY_TYPE::Apple Development" # Apple Development, Apple Distribution
            echo "::set-output name=EXPORT_METHOD::development" # app-store, development, ad-hoc
            echo "::set-output name=LANE::build" # build, beta, release
            elif [ "${{ github.event.inputs.environment }}" == "Base-Sandbox-Production" ]
          then
            echo "::set-output name=CERTIFICATE_TYPE::appstore" #appstore, development, adhoc
            echo "::set-output name=CODE_SIGN_IDENTITY_TYPE::Apple Distribution" # Apple Development, Apple Distribution
            echo "::set-output name=EXPORT_METHOD::app-store" # app-store, development, ad-hoc
            echo "::set-output name=LANE::beta" # build, beta, release
          fi
          BUILD_VERSION=${{ needs.buildIOSProject.outputs.buildVersion }}
          SAFE_BUILD_VERSION=$(echo "${BUILD_VERSION//./_}")
          BASE_NAME="${{ env.BUILD_NAME }}_iOS_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          BASE_NAME_NO_PLATFORM=${{ env.BUILD_NAME }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}

          echo "::set-output name=DO_DEBUG_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/DEBUG"
          echo "::set-output name=DO_RELEASE_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/RELEASE"
          echo "::set-output name=BASE_NAME::${BASE_NAME}"
        shell: bash

      - name: Fix File Permissions and Run fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          IOS_BUILD_PATH: ${{ format('{0}/build/iOS/{1}', github.workspace, env.BUILD_NAME) }}
          IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }} # Change it to match your Unity bundle id
          PROJECT_NAME: ${{ env.BUILD_NAME }} # Change it to match your project's name

          GH_PAT: ${{ secrets.GH_PAT }}
          GH_USER: ${{ secrets.GH_USER }}
          CERTIFICATE_TYPE: ${{ steps.setupVariables.outputs.CERTIFICATE_TYPE }}
          CODE_SIGN_IDENTITY_TYPE: ${{ steps.setupVariables.outputs.CODE_SIGN_IDENTITY_TYPE }}
          EXPORT_METHOD: ${{ steps.setupVariables.outputs.EXPORT_METHOD }}
        run: |
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          bundle install
          bundle exec fastlane ios ${{ steps.setupVariables.outputs.LANE }}

      - name: Zip IPA
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: RELEASE_${{ steps.setupVariables.outputs.BASE_NAME }}.zip
          path: "*.ipa"

      - name: Upload Debug To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ env.BUILD_NAME }}.app.dSYM.zip"
          out_dir: "${{ steps.setupVariables.outputs.DO_DEBUG_OUTPUT_PATH }}"
          permission: private

      - name: Archive Debug On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ env.BUILD_NAME }}.app.dSYM.zip"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/DEBUG"
          permission: private

      - name: Upload Release To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "RELEASE_${{ steps.setupVariables.outputs.BASE_NAME }}.zip"
          out_dir: "${{ steps.setupVariables.outputs.DO_RELEASE_OUTPUT_PATH }}"
          permission: private

      - name: Archive Release On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "RELEASE_${{ steps.setupVariables.outputs.BASE_NAME }}.zip"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/RELEASE"
          permission: private

      - name: Upload build to App Center
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Development' }}
        uses: Battle-Nations/MicrosoftAppCenterActions/upload-build@main
        with:
          appName: "Battle-Nations/BaseSandboxIOS"
          token: ${{ secrets.APP_CENTER_API_KEY }}
          group: "Internal"
          file: "${{ env.BUILD_NAME }}.ipa"
          gitReleaseNotes: true
          notifyTesters: true
          symbolPath: "${{ env.BUILD_NAME }}.app.dSYM.zip"

  buildAndPublishAndroid:
    name: Build and Publish Android
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: envVarSetup

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v6
        with:
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}
          fetch-depth: 0
          submodules: 'recursive'

      - name: Show disk usage
        run: df -h
        shell: bash

      - uses: actions/cache@v3
        with:
          path: Library
          key:
            Library-Android-${{ needs.envVarSetup.outputs.FILE_HASH }}
          restore-keys: |
            Library-Android-

      - uses: Battle-Nations/unity-builder@bn-ci-main-android-patch
        id: buildStep
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          buildName: ${{ env.BUILD_NAME }}
          gitPrivateToken: ${{ secrets.GH_PAT }}
          androidAppBundle: false
          androidKeystoreName: user # This file won't exist, but this property needs to exist.
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}

      - uses: Battle-Nations/unity-builder@bn-ci-main-android-patch
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          buildName: ${{ env.BUILD_NAME }}
          gitPrivateToken: ${{ secrets.GH_PAT }}
          androidAppBundle: true
          androidKeystoreName: user # This file won't exist, but this property needs to exist.
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}

      - run: ls -lashi build/Android/
        shell: bash

      # Setup Variable based on OS so we can share the same workflow for all three platforms
      - name: Setup Variables
        id: setupVariables
        run: |
          BUILD_PATH="build/Android"
          BUILD_VERSION=${{ steps.buildStep.outputs.buildVersion }}
          SAFE_BUILD_VERSION=$(echo "${BUILD_VERSION//./_}")
          BASE_NAME="${{ env.BUILD_NAME }}_Android_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          BASE_NAME_NO_PLATFORM=${{ env.BUILD_NAME }}_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}
          echo "::set-output name=BASE_NAME_NO_PLATFORM_NO_NAME::_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          echo "::set-output name=BASE_NAME_NO_NAME::_Android_${SAFE_BUILD_VERSION}_${{ needs.envVarSetup.outputs.BUILD_TIME }}_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}"
          DO_DEBUG_SOURCE_PATH=DEBUG_${BASE_NAME}.zip

          echo "::set-output name=RELEASE_ZIP_FILES::*.apk *.aab"
          DO_DEBUG_SOURCE_PATH=${BUILD_PATH}/${DO_DEBUG_SOURCE_PATH}
          DO_RELEASE_SOURCE_PATH=${BUILD_PATH}/RELEASE_${BASE_NAME}.zip
          echo "::set-output name=BUILD_PATH::${BUILD_PATH}"
          echo "::set-output name=DO_DEBUG_SOURCE_PATH::${DO_DEBUG_SOURCE_PATH}"
          echo "::set-output name=DO_RELEASE_SOURCE_PATH::${DO_RELEASE_SOURCE_PATH}"
          echo "::set-output name=RELEASE_ZIP_FILENAME::RELEASE_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILENAME::DEBUG_${BASE_NAME}.zip"
          echo "::set-output name=DEBUG_ZIP_FILES::${{ env.BUILD_NAME }}_BurstDebugInformation_DoNotShip/"
          echo "::set-output name=DO_DEBUG_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/DEBUG"
          echo "::set-output name=DO_RELEASE_OUTPUT_PATH::${BASE_NAME_NO_PLATFORM}/RELEASE"
        shell: bash

      # We need to chown the files in build on linux for our zip action below
      - run: sudo chown -R $USER ${{ steps.setupVariables.outputs.BUILD_PATH }}

      - name: Zip RELEASE
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ steps.setupVariables.outputs.RELEASE_ZIP_FILENAME }}
          directory: ${{ steps.setupVariables.outputs.BUILD_PATH }}
          path: ${{ steps.setupVariables.outputs.RELEASE_ZIP_FILES }}

      - name: Upload Debug To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_DEBUG_OUTPUT_PATH }}"
          permission: private

      - name: Archive Debug On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_DEBUG_SOURCE_PATH }}"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/DEBUG"
          permission: private

      - name: Upload RELEASE To Digital Ocean
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_CI_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_RELEASE_SOURCE_PATH }}"
          out_dir: "${{ steps.setupVariables.outputs.DO_RELEASE_OUTPUT_PATH }}"
          permission: private

      - name: Archive RELEASE On Digital Ocean
        if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: "${{ steps.setupVariables.outputs.DO_RELEASE_SOURCE_PATH }}"
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ steps.buildStep.outputs.buildVersion }}/RELEASE"
          permission: private

      # - name: Upload build to App Center
      #   if: ${{ github.event.inputs.environment == 'Base-Sandbox-Development' }}
      #   uses: Battle-Nations/MicrosoftAppCenterActions/upload-build@main
      #   with:
      #     appName: "Battle-Nations/BaseSandboxAndroid"
      #     token: ${{ secrets.APP_CENTER_API_KEY }}
      #     group: "Internal"
      #     file: "${{ env.BUILD_NAME }}.ipa"
      #     gitReleaseNotes: true
      #     notifyTesters: true
      #     symbolPath: "${{ env.BUILD_NAME }}.app.dSYM.zip"

  publishDesktopPlatforms:
    name: Publish Desktop Platform Builds
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: buildForDesktopPlatforms
    strategy:
      fail-fast: true
      matrix:
        patchkitSecret: [ PATCHKIT_LNX_SECRET, PATCHKIT_WIN_SECRET, PATCHKIT_MAC_SECRET ]

    steps:
      - uses: Battle-Nations/Patchkit-Actions/publish@v2
        with:
          secret: ${{ secrets[matrix.patchkitSecret] }}
          api-key: ${{ secrets.PATCHKIT_API_KEY }}

  archiveSource:
    name: Archive Source
    if: ${{ github.event.inputs.environment == 'Base-Sandbox-Production' }}
    needs: [envVarSetup, publishDesktopPlatforms, buildAndPublishIOSIPA]
    runs-on: windows-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # Using cached checkout to ensure the lfs assets are cached for the main runners
      # Otherwise we might pull 3 times and waste bandwidth
      - uses: Battle-Nations/action-cached-lfs-checkout@bn-ci-main
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}
          fetch-depth: 0
          submodules: 'recursive'
      
      - name: Zip Source
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: ${{ env.BUILD_NAME }}_SOURCE_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}.zip

      - name: Archive Source
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_ARCHIVE_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ env.BUILD_NAME }}_SOURCE_${{ needs.envVarSetup.outputs.GITHUB_SHA_SHORT }}.zip
          out_dir: "${{ secrets.DO_ARCHIVE_BASE_PATH }}/v${{ needs.buildForDesktopPlatforms.outputs.buildVersion }}/SOURCE"
          permission: private

  notifyVersionRelease:
    name: Notify Discord of Version Release
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [publishDesktopPlatforms, buildForDesktopPlatforms, buildAndPublishIOSIPA]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.ref }}'
          token: ${{ secrets.GH_PAT }}
          repository: ${{ secrets.REPO_NAME }}
      
      - uses: actions/checkout@v3
        with:
          repository: Battle-Nations/CI-Release-Notes
          path: release-notes-generator

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Format Release Notes
        id: formatReleaseNotes
        run: |
          output=$(python release-notes-generator/format_release_notes.py releasenotes.txt ${{ needs.buildForDesktopPlatforms.outputs.buildVersion }} ${{ secrets.DISCORD_NOTIFY_ROLE_ID }})
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=CHANGELOG::$output"

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.RELEASE_NOTES_DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: ${{ steps.formatReleaseNotes.outputs.CHANGELOG }}
